import telebot
from telebot import types
import nmap
import requests
import os
import subprocess
from TOKEN import VIRUSTOTAL_API_KEY
from TOKEN import  SHODAN_API_KEY
from TOKEN import GOOGLE_SAFE_BROWSING_API_KEY
from TOKEN import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ TOKEN.py
import sqlite3
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot(TOKEN)
nm = nmap.PortScanner()
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start

def get_free_proxies():
    response = requests.get('https://www.proxy-list.download/api/v1/get?type=https')
    if response.status_code == 200:
        return response.text.split('\r\n')
    else:
        return []
    
def create_table():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_user_to_db(user_id, username, first_name, last_name):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

def get_geoip_info(ip):
    try:
        response = requests.get(f'http://ipinfo.io/{ip}/json')
        data = response.json()
        if 'error' not in data:
            return data
        else:
            return None
    except Exception as e:
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    save_user_to_db(user_id, username, first_name, last_name)

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_start = types.InlineKeyboardButton("üåü –ù–∞—á–∞—Ç—å", callback_data="start")
    btn_help = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    btn_scan = types.InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan")
    btn_checkurl = types.InlineKeyboardButton("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ URL", callback_data="checkurl")
    btn_geoip = types.InlineKeyboardButton("üåç GeoIP", callback_data="geoip")
    btn_scan_vuln = types.InlineKeyboardButton("üõ†Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", callback_data="scan_vuln")
    btn_proxy = types.InlineKeyboardButton("Proxy", callback_data="proxy")
    markup.add(btn_start, btn_help, btn_scan, btn_checkurl, btn_geoip, btn_scan_vuln,btn_proxy)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:\n"
        "üåü –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏—Ä—É—Å—ã\n"
        "üåç –ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ IP\n"
        "üõ†Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å–∞–π—Ç –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏", 
        "–±–µ—Å–ø–ª–∞—Ç–Ω–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞", 

        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "start":
        bot.send_message(call.message.chat.id, "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    elif call.data == "help":
        bot.send_message(call.message.chat.id, "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å:\n"
                                               "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                                               "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                                               "/scan - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                                               "/checkurl - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏—Ä—É—Å—ã\n"
                                               "/geoip - –ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ IP\n"
                                               "/scan_vuln - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å–∞–π—Ç –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n"
                                              )
    elif call.data == "scan":
        bot.send_message(call.message.chat.id, 
                         "üîç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ IP –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                         "/scan 0.0.0.0")
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
    elif call.data == "checkurl":
        bot.send_message(call.message.chat.id, 
                        "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏—Ä—É—Å—ã\n"
                        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n"
                        "/checkurl https://www.google.com/")
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
    elif call.data == "geoip":
        bot.send_message(call.message.chat.id, 
                        "üåç –ù–∞—Ö–æ–¥–∏–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ IP\n"
                        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n"
                        "/geoip 0.0.0.0")
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ GeoIP
    elif call.data == "scan_vuln":
        bot.send_message(call.message.chat.id, 
                        "üõ†Ô∏è –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n"
                        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n"
                        "/scan_vuln https://www.google.com/")
        
    elif call.data == "proxy":
        bot.send_message(call.message.chat.id, 
                        "–∑–≤–ø—É—Å—Ç–∏ –∫–∞–º–∞–Ω–¥–∂–æ /proxy",)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
                          "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                          "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                          "/scan - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                          "/checkurl - —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤–∏—Ä—É—Å–∞\n"
                          "/geoip - –Ω–∞—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ IP\n"
                          "/scan_vuln - —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤–µ–± —Å–∞–∏—Ç –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å\n"
                          "/proxy - –±–µ—Å–ø–ª–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")


@bot.message_handler(commands=['scan'])
def scan(message):
    video_nmap = './video/2024-08-21 06-23-32.mp4'
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    try:
        with open(video_nmap, 'rb') as video_file:
            bot.send_video(message.chat.id, video_file, caption='–ü—Ä–∏–º–µ—Ä')
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /scan 192.168.0.104")
        return

    target = parts[1].strip()
    bot.reply_to(message, f"–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {target}...")

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        nm.scan(hosts=target, arguments='-T4 -F')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Å—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if nm.all_hosts():
            result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            for host in nm.all_hosts():
                result_message += f"Host: {host}\n"
                result_message += f"State: {nm[host].state()}\n"
                result_message += "Ports:\n"
                if 'ports' in nm[host]:
                    for port in nm[host]['ports']:
                        result_message += f"  Port {port}: {nm[host]['ports'][port]['name']}\n"
                else:
                    result_message += "  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤\n"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if len(result_message) > 4096:
                result_message = result_message[:4096] + '... (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–µ–∑–∞–Ω—ã)'
            bot.send_message(message.chat.id, result_message)
        else:
            bot.reply_to(message, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /geoip
@bot.message_handler(commands=['geoip'])
def geoip_lookup(message):
    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /geoip 8.8.8.8")
        return

    ip_address = parts[1].strip()
    bot.reply_to(message, f"–ò—â—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è {ip_address}...")

    geoip_info = get_geoip_info(ip_address)
    if geoip_info:
        result_message = (f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {ip_address}:\n"
                          f"–°—Ç—Ä–∞–Ω–∞: {geoip_info.get('country', 'N/A')}\n"
                          f"–†–µ–≥–∏–æ–Ω: {geoip_info.get('region', 'N/A')}\n"
                          f"–ì–æ—Ä–æ–¥: {geoip_info.get('city', 'N/A')}\n"
                          f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {geoip_info.get('org', 'N/A')}\n"
                          f"–õ–æ–∫–∞—Ü–∏—è: {geoip_info.get('loc', 'N/A')}")
        bot.send_message(message.chat.id, result_message)
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ IP-–∞–¥—Ä–µ—Å.")


def check_url_for_phishing(url):
    api_url = "https://safebrowsing.googleapis.com/v4/threatMatches:find"
    params = {
        "key": GOOGLE_SAFE_BROWSING_API_KEY
    }
    json_data = {
        "client": {
            "clientId": "yourcompanyname",
            "clientVersion": "1.0"
        },
        "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING"],
            "platformTypes": ["ANY_PLATFORM"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [{"url": url}]
        }
    }
    response = requests.post(api_url, params=params, json=json_data)
    result = response.json()

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, URL –±–µ–∑–æ–ø–∞—Å–µ–Ω
    if not result.get('matches'):
        return "URL –±–µ–∑–æ–ø–∞—Å–µ–Ω."
    else:
        return "–í–Ω–∏–º–∞–Ω–∏–µ! URL –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–º –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–º."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /checkurl
@bot.message_handler(commands=['checkurl'])
def check_url(message):
    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü—Ä–∏–º–µ—Ä: /checkurl http://example.com")
        return

    url = parts[1].strip()
    result = check_url_for_phishing(url)
    bot.reply_to(message, result)

@bot.message_handler(commands=['scan_vuln'])
def scan_vuln(message):
    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /scan_vuln http://example.com")
        return

    url = parts[1].strip()
    bot.reply_to(message, f"–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è {url}...")

    try:
        # –ó–∞–ø—É—Å–∫ Nikto —á–µ—Ä–µ–∑ subprocess
        result = subprocess.run(['nikto', '-h', url], capture_output=True, text=True)
        if result.returncode == 0:
            bot.reply_to(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n{result.stdout}")
        else:
            bot.reply_to(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {result.stderr}")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['proxy'])
def send_proxy_list(message):
    proxies = get_free_proxies()
    if proxies:
        proxy_message = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏:\n"
        for proxy in proxies:
            proxy_message += f"{proxy}\n"
        bot.reply_to(message, proxy_message)
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == '__main__':
    create_table()
    bot.polling()
